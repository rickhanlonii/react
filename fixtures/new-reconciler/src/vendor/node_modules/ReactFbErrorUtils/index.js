/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * Downstream version of ReactErrorUtils.
 *
 * @format
 * @flow
 */

import ErrorGuard from 'ErrorGuard';

export function invokeGuardedCallback<A, B, C, D, E, F, Context>(
  name: string | null,
  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,
  context: Context,
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F
): void {
  const funcArgs = Array.prototype.slice.call(arguments, 3);
  /* $FlowFixMe[this-in-exported-function] Error found during ES6
   * imports/exports conversion. */
  const onError = this.onError;
  try {
    console.log(ErrorGuard);
    ErrorGuard.applyWithGuard(func, (context: any), funcArgs, {onError, name});
  } catch (err) {
    // ErrorGuard may rethrow.
    onError(err);
  }
}

export function wrapEventListener<TOut, TArgs: $ReadOnlyArray<mixed>>(
  name: string,
  callback: (...TArgs) => TOut
): (...TArgs) => TOut | void {
  return callback;
}
